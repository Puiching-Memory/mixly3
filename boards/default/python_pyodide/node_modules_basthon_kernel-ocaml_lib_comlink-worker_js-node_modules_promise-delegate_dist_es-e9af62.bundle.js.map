{"version":3,"file":"node_modules_basthon_kernel-ocaml_lib_comlink-worker_js-node_modules_promise-delegate_dist_es-e9af62.bundle.js","mappings":";;;;;;;;;;;;;AAAiC;AACY;AAC7C,+CAAM,CAAC,sDAAiB;;;;;;;;;;;;;;;;ACFuC;AACxD,gCAAgC,yEAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,aAAa,QAAQ,gSAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA,2CAA2C,OAAO;AAClD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,mBAAmB;AAC5D;AACA;AACA;;;;;;;;;;;;;;;ACxJA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC0B;AAC3B;;;;;;UCvCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;;;;;UEHA;UACA","sources":["webpack://@mixly/python-pyodide/./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js","webpack://@mixly/python-pyodide/./node_modules/@basthon/kernel-ocaml/lib/worker.js","webpack://@mixly/python-pyodide/./node_modules/promise-delegate/dist/es/PromiseDelegate.js","webpack://@mixly/python-pyodide/webpack/bootstrap","webpack://@mixly/python-pyodide/webpack/runtime/chunk loaded","webpack://@mixly/python-pyodide/webpack/runtime/create fake namespace object","webpack://@mixly/python-pyodide/webpack/runtime/define property getters","webpack://@mixly/python-pyodide/webpack/runtime/ensure chunk","webpack://@mixly/python-pyodide/webpack/runtime/get javascript chunk filename","webpack://@mixly/python-pyodide/webpack/runtime/get mini-css chunk filename","webpack://@mixly/python-pyodide/webpack/runtime/global","webpack://@mixly/python-pyodide/webpack/runtime/hasOwnProperty shorthand","webpack://@mixly/python-pyodide/webpack/runtime/make namespace object","webpack://@mixly/python-pyodide/webpack/runtime/publicPath","webpack://@mixly/python-pyodide/webpack/runtime/importScripts chunk loading","webpack://@mixly/python-pyodide/webpack/runtime/startup chunk dependencies","webpack://@mixly/python-pyodide/webpack/before-startup","webpack://@mixly/python-pyodide/webpack/startup","webpack://@mixly/python-pyodide/webpack/after-startup"],"sourcesContent":["import { expose } from \"comlink\";\nimport { OCamlKernelWorker } from \"./worker\";\nexpose(OCamlKernelWorker);\n","import { KernelWorkerBase } from \"@basthon/kernel-base/worker\";\nexport class OCamlKernelWorker extends KernelWorkerBase {\n    constructor(options) {\n        // do not forget to call the parent constructor\n        super(options);\n        // the window object is not available in a webworker...\n        self.window = self;\n        this._initInnerCode = `\\\nopen Js_of_ocaml\nmodule Basthon = struct\n  let download (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##download path)\n  let sleep (duration: float): unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##sleep duration)\n  let create_canvas () = (Js.Unsafe.eval_string \"self.basthon.__kernel__\")##createcanvas()\n  let display_canvas canvas: unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##displayCanvas canvas)\n  let save_canvas canvas (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##savecanvas canvas path)\n  let download_canvas ?(format = \"png\") canvas: unit = ignore((Js.Unsafe.eval_string \"self.basthon\")##downloadCanvas canvas (Js.string format))\n  let display_image (path: string): unit = ignore((Js.Unsafe.eval_string \"self.basthon.__kernel__\")##displayimage path)\n  let version () : string = (Js.Unsafe.eval_string \"self.basthon.__kernel__\")##version()\n  let help () : unit = print_endline {ext|\\\nBasthon module\n  help:               Show this help.\n  download path:      Download a file from the local filesystem.\n  sleep duration:     Sleep for a certain amount of seconds.\n  display_image path: Display a PNG image from the local filesystem.\n  create_canvas:      Create a HTML5 canvas to be displayed with display_canvas.\n  display_canvas canvas:   Display a HTML5 canvas created with create_canvas.\n  save_canvas canvas path: Save a canvas to a PNG/JPG file to the local filesystem.\n  download_canvas ?(format = \"png\") canvas: Download a canvas to a PNG/JPG file.\n|ext}\nend`;\n    }\n    /*\n     * Initialize the kernel.\n     */\n    async _init(options) {\n        // io redirections\n        console.info = (...args) => console.log(...args);\n        console.warn = (...args) => console.error(...args);\n        globalThis.addEventListener(\"error\", (e) => console.error(e.toString()));\n        // kernel loading\n        const { __kernel__ } = await import(\"./__kernel__\");\n        this.__kernel__ = __kernel__;\n        if (this.__kernel__?.init() !== 0)\n            throw new Error(\"Can't start OCaml kernel!\");\n        // mock Graphics_js.draw_image for use in worker\n        // see https://github.com/ocsigen/js_of_ocaml/blob/1c43da9a925a9df247548158879439ef4039eb38/runtime/graphics.js#L442\n        self.jsoo_runtime.caml_gr_draw_image = (im, x, y) => {\n            const s = self.jsoo_runtime.caml_gr_state_get();\n            s.context.putImageData(im, x, s.height - im.height - y);\n            return 0;\n        };\n        // execute magic init code\n        this.__kernel__?.exec(this._initInnerCode);\n    }\n    async _eval(data, code) {\n        if (this.__kernel__ == null)\n            return;\n        this.__eval_data__ = data;\n        this.__kernel__.io.stdout = (...args) => {\n            this.sendStdoutStream(data, args.join(\" \"));\n        };\n        this.__kernel__.io.stderr = (...args) => {\n            this.sendStderrStream(data, args.join(\" \"));\n        };\n        const result = this.__kernel__?.exec(code);\n        if (typeof result === \"string\" && result.length > 0)\n            return { \"text/plain\": result.replace(/\\n$/, \"\") };\n        return undefined;\n    }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 in teminal prompt.\n     */\n    async more(code) {\n        return false;\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    putFile(filename, content) {\n        if (this.__kernel__ == null)\n            return;\n        this.__kernel__.createfile(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    putModule(filename, content) {\n        this.putFile(filename, content);\n        /* why is this needed?\n         * even if path is already added using the #directory directive,\n         * one should recall the directive each time the folder is modified...\n         */\n        this.__kernel__?.loadmodule(filename);\n    }\n    /**\n     * OCaml wrapper arround Kernel.download (to be called by __kernel__.ml).\n     */\n    ocamlDownload(content, filename) {\n        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);\n        this.download(array, filename);\n    }\n    /**\n     * Send eval.display event with the given canvas\n     * and ocaml-canvas as display_type.\n     */\n    displayCanvas(canvas) {\n        this.display(canvas);\n    }\n    /**\n     * Save a canvas to a file on the local FS.\n     */\n    async saveCanvas(canvas, path) {\n        if (this.__kernel__ == null)\n            return;\n        const ext = path.split(\".\").pop()?.toLowerCase();\n        let mime = \"image/png\";\n        if (ext === \"jpg\" || ext === \"jpeg\")\n            mime = \"image/jpeg\";\n        const blob = await canvas.convertToBlob({ type: mime });\n        const content = await blob.arrayBuffer();\n        this.__kernel__.createfile(path, content);\n    }\n    /**\n     * Download a canvas as an image file (png or jpg).\n     */\n    downloadCanvas(canvas, format) {\n        if (format == null)\n            format = \"png\";\n        //@ts-ignore\n        format = format.toString().toLowerCase();\n        const types = { jpg: \"image/jpeg\", jpeg: \"images/jpeg\", png: \"image/png\" };\n        if (!(format in types))\n            format = \"png\";\n        const mime = types[format];\n        (async () => {\n            const blob = await canvas.convertToBlob({ type: mime });\n            let image = await this.blobToDataURL(blob);\n            // image = image.replace(mime, \"image/octet-stream\");\n            this.download(image, `canvas.${format}`);\n        })();\n    }\n    /**\n     * Display a PNG image.\n     */\n    displayImage(content) {\n        const data = this.clone(this.__eval_data__);\n        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);\n        const blob = new Blob([array], { type: \"image/png\" });\n        this.displayBlob(blob, data);\n    }\n}\n","var PromiseDelegate = (function () {\r\n    function PromiseDelegate(ignoreMultipleSettles) {\r\n        var _this = this;\r\n        if (ignoreMultipleSettles === void 0) { ignoreMultipleSettles = false; }\r\n        this.ignoreMultipleSettles = ignoreMultipleSettles;\r\n        this.isSettled = false;\r\n        this.promise = new Promise(function (resolve, reject) {\r\n            _this.resolveCallback = resolve;\r\n            _this.rejectCallback = reject;\r\n        });\r\n    }\r\n    PromiseDelegate.prototype.markAsSettled = function () {\r\n        var wasSettled = this.isSettled;\r\n        if (wasSettled && !this.ignoreMultipleSettles) {\r\n            throw new Error(\"PromiseDelegate is already settled!\");\r\n        }\r\n        this.isSettled = true;\r\n        return !wasSettled;\r\n    };\r\n    Object.defineProperty(PromiseDelegate.prototype, \"settled\", {\r\n        get: function () {\r\n            return this.isSettled;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    PromiseDelegate.prototype.resolve = function (value) {\r\n        if (this.markAsSettled()) {\r\n            this.resolveCallback(value);\r\n        }\r\n    };\r\n    PromiseDelegate.prototype.reject = function (reason) {\r\n        if (this.markAsSettled()) {\r\n            this.rejectCallback(reason);\r\n        }\r\n    };\r\n    return PromiseDelegate;\r\n}());\r\nexport { PromiseDelegate };\r\n//# sourceMappingURL=PromiseDelegate.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_basthon_kernel-base_lib_kernel_js\",\"vendors-node_modules_comlink_dist_esm_comlink_mjs\",\"vendors-node_modules_basthon_kernel-base_lib_worker_index_js\"], () => (__webpack_require__(\"./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"node_modules_basthon_kernel-ocaml_lib_comlink-worker_js-node_modules_promise-delegate_dist_es-e9af62\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_mixly_python_pyodide\"] = self[\"webpackChunk_mixly_python_pyodide\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\"vendors-node_modules_basthon_kernel-base_lib_kernel_js\",\"vendors-node_modules_comlink_dist_esm_comlink_mjs\",\"vendors-node_modules_basthon_kernel-base_lib_worker_index_js\"].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}