{"version":3,"file":"node_modules_basthon_kernel-python3_lib_index_js.bundle.js","mappings":";;;;;;;;;;;;;;;AAAyB;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;ACAyB;AAClD;AACA;AACA;AACA;AACO,4BAA4B,4DAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,gBAAgB;AAChE;AACA;AACA;AACA;AACA,qCAAqC,mBAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gBAAgB;AAChD;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@mixly/python-pyodide/./node_modules/@basthon/kernel-base/lib/index.js","webpack://@mixly/python-pyodide/./node_modules/@basthon/kernel-python3/lib/index.js","webpack://@mixly/python-pyodide/./node_modules/@basthon/kernel-python3/lib/kernel.js"],"sourcesContent":["export * from \"./kernel\";\n","export * from \"./kernel\";\n","import { KernelBase } from \"@basthon/kernel-base\";\nconst PYODIDE_VERSION = \"0.23.2\";\n/**\n * A Python kernel that satisfies Basthon's API.\n */\nexport class Python3Kernel extends KernelBase {\n    constructor(options) {\n        super(options);\n        /**\n         * Where to find pyodide.js (private).\n         */\n        this._pyodideURLs = [\n            `https://cdn.jsdelivr.net/pyodide/v{PYODIDE_VERSION}/full/pyodide.js`,\n        ];\n        this.__kernel__ = null;\n        this.pythonVersion = \"\";\n        // for locally installed Pyodide\n        this._pyodideURLs.unshift(`${this.basthonRoot()}/pyodide/pyodide.js`);\n        this._pyodideURLs = options?.pyodideURLs ?? this._pyodideURLs;\n    }\n    /**\n     * Get the URL of Basthon modules dir.\n     */\n    basthonModulesRoot(absolute = false) {\n        return this.basthonRoot(absolute) + \"/modules\";\n    }\n    language() {\n        return \"python3\";\n    }\n    languageName() {\n        return \"Python 3\";\n    }\n    moduleExts() {\n        return [\"py\"];\n    }\n    /**\n     * What to do when loaded (private).\n     */\n    async _onload() {\n        const pyodide = window.pyodide;\n        // reformat repodata\n        const packages = pyodide._api.repodata_packages;\n        for (let p of Object.keys(packages)) {\n            const item = packages[p];\n            item.file_name = item.file_name.replace(\"{basthonRoot}\", this.basthonRoot(true));\n        }\n        // get the version of Python from Python\n        this.pythonVersion = pyodide.runPython(\"import platform ; platform.python_version()\");\n        // load basthon and get kernel\n        await pyodide.loadPackage(\"basthon\");\n        this.__kernel__ = pyodide.pyimport(\"basthon\").__kernel__;\n    }\n    /**\n     * Start the Basthon kernel asynchronously.\n     */\n    async _init() {\n        await super._init();\n        let pyodideURL = this._pyodideURLs[0];\n        for (let url of this._pyodideURLs) {\n            url = url.replace(\"{PYODIDE_VERSION}\", PYODIDE_VERSION);\n            try {\n                const response = await fetch(url, { method: \"HEAD\" });\n                if (response.ok) {\n                    pyodideURL = url;\n                    break;\n                }\n            }\n            catch (e) { }\n        }\n        try {\n            await Python3Kernel.loadScript(pyodideURL);\n        }\n        catch (error) {\n            console.log(error);\n            console.error(\"Can't load pyodide.js\");\n            throw error;\n        }\n        if (window.loadPyodide == null) {\n            console.log(\"window.loadPyodide is null!\");\n            throw new Error(\"Can't load pyodide.js\");\n        }\n        try {\n            // loading with custom repodata.json\n            window.pyodide = await window.loadPyodide({\n                lockFileURL: this.basthonRoot() + \"/repodata.json\",\n            });\n        }\n        catch (error) {\n            console.log(error);\n            console.error(\"Can't load Python from Pyodide\");\n            throw error;\n        }\n        await this._onload();\n    }\n    /**\n     * Execution count getter overload.\n     */\n    get execution_count() {\n        return this.__kernel__.execution_count();\n    }\n    /**\n     * Basthon async code evaluation function.\n     */\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        if (typeof outCallback === \"undefined\") {\n            outCallback = function (text) {\n                console.log(text);\n            };\n        }\n        if (typeof errCallback === \"undefined\") {\n            errCallback = function (text) {\n                console.error(text);\n            };\n        }\n        // dependencies are loaded by eval\n        const proxy = await this.__kernel__.eval(code, outCallback, errCallback, data);\n        // when an error occures, proxy should be the error message\n        if (!(proxy instanceof window.pyodide.ffi.PyProxy))\n            throw proxy;\n        const res = proxy.toJs({\n            create_proxies: false,\n            dict_converter: Object.fromEntries,\n        });\n        proxy.destroy();\n        return res;\n    }\n    /**\n     * Start the kernel.\n     */\n    async _start() {\n        await super._start();\n        this.__kernel__.start();\n    }\n    /**\n     * Stop the kernel.\n     */\n    async _stop() {\n        this.__kernel__.stop();\n        await super._stop();\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    async putFile(filename, content) {\n        this.__kernel__.put_file(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    async putModule(filename, content) {\n        return await this.__kernel__.put_module(filename, content);\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    userModules() {\n        const proxy = this.__kernel__.user_modules();\n        if (!(proxy instanceof window.pyodide.ffi.PyProxy))\n            return proxy;\n        const res = proxy.toJs();\n        proxy.destroy();\n        return res;\n    }\n    /**\n     * Get a file content from the VFS.\n     */\n    getFile(path) {\n        return this.__kernel__.get_file(path).toJs();\n    }\n    /**\n     * Get a user module file content.\n     */\n    getUserModuleFile(filename) {\n        return this.__kernel__.get_user_module_file(filename).toJs();\n    }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 for teminal prompt.\n     */\n    async more(source) {\n        return this.__kernel__.more(source);\n    }\n    /**\n     * Mimic the CPython's REPL banner.\n     */\n    banner() {\n        /* We don't return this.__kernel__.banner();\n         * since the banner should be available ASAP.\n         * In tests, we check this.banner() ===  this.__kernel__.banner().\n         */\n        return `Python 3.11.2 (main, May  3 2023 04:00:05) on WebAssembly/Emscripten\\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.`;\n    }\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    async complete(code) {\n        const proxy = this.__kernel__.complete(code);\n        if (!(proxy instanceof window.pyodide.ffi.PyProxy))\n            return proxy;\n        const res = proxy.toJs();\n        proxy.destroy();\n        return res;\n    }\n    /**\n     * Change current directory (Python's virtual FS).\n     */\n    chdir(path) {\n        window.pyodide._module.FS.chdir(path);\n    }\n    /**\n     * Create directory (Python's virtual FS).\n     */\n    mkdir(path) {\n        window.pyodide._module.FS.mkdir(path);\n    }\n}\n"],"names":[],"sourceRoot":""}