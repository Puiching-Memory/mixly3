/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js":
/*!******************************************************************!*\
  !*** ./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! comlink */ "./node_modules/comlink/dist/esm/comlink.mjs");
/* harmony import */ var _worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./worker */ "./node_modules/@basthon/kernel-ocaml/lib/worker.js");


(0,comlink__WEBPACK_IMPORTED_MODULE_1__.expose)(_worker__WEBPACK_IMPORTED_MODULE_0__.OCamlKernelWorker);


/***/ }),

/***/ "./node_modules/@basthon/kernel-ocaml/lib/worker.js":
/*!**********************************************************!*\
  !*** ./node_modules/@basthon/kernel-ocaml/lib/worker.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OCamlKernelWorker: () => (/* binding */ OCamlKernelWorker)
/* harmony export */ });
/* harmony import */ var _basthon_kernel_base_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @basthon/kernel-base/worker */ "./node_modules/@basthon/kernel-base/lib/worker/index.js");

class OCamlKernelWorker extends _basthon_kernel_base_worker__WEBPACK_IMPORTED_MODULE_0__.KernelWorkerBase {
    constructor(options) {
        // do not forget to call the parent constructor
        super(options);
        // the window object is not available in a webworker...
        self.window = self;
        this._initInnerCode = `\
open Js_of_ocaml
module Basthon = struct
  let download (path: string): unit = ignore((Js.Unsafe.eval_string "self.basthon.__kernel__")##download path)
  let sleep (duration: float): unit = ignore((Js.Unsafe.eval_string "self.basthon")##sleep duration)
  let create_canvas () = (Js.Unsafe.eval_string "self.basthon.__kernel__")##createcanvas()
  let display_canvas canvas: unit = ignore((Js.Unsafe.eval_string "self.basthon")##displayCanvas canvas)
  let save_canvas canvas (path: string): unit = ignore((Js.Unsafe.eval_string "self.basthon.__kernel__")##savecanvas canvas path)
  let download_canvas ?(format = "png") canvas: unit = ignore((Js.Unsafe.eval_string "self.basthon")##downloadCanvas canvas (Js.string format))
  let display_image (path: string): unit = ignore((Js.Unsafe.eval_string "self.basthon.__kernel__")##displayimage path)
  let version () : string = (Js.Unsafe.eval_string "self.basthon.__kernel__")##version()
  let help () : unit = print_endline {ext|\
Basthon module
  help:               Show this help.
  download path:      Download a file from the local filesystem.
  sleep duration:     Sleep for a certain amount of seconds.
  display_image path: Display a PNG image from the local filesystem.
  create_canvas:      Create a HTML5 canvas to be displayed with display_canvas.
  display_canvas canvas:   Display a HTML5 canvas created with create_canvas.
  save_canvas canvas path: Save a canvas to a PNG/JPG file to the local filesystem.
  download_canvas ?(format = "png") canvas: Download a canvas to a PNG/JPG file.
|ext}
end`;
    }
    /*
     * Initialize the kernel.
     */
    async _init(options) {
        // io redirections
        console.info = (...args) => console.log(...args);
        console.warn = (...args) => console.error(...args);
        globalThis.addEventListener("error", (e) => console.error(e.toString()));
        // kernel loading
        const { __kernel__ } = await Promise.all(/*! import() */[__webpack_require__.e("vendors-node_modules_basthon_kernel-ocaml_lib___kernel___js"), __webpack_require__.e("_fabf-_1224")]).then(__webpack_require__.t.bind(__webpack_require__, /*! ./__kernel__ */ "./node_modules/@basthon/kernel-ocaml/lib/__kernel__.js", 23));
        this.__kernel__ = __kernel__;
        if (this.__kernel__?.init() !== 0)
            throw new Error("Can't start OCaml kernel!");
        // mock Graphics_js.draw_image for use in worker
        // see https://github.com/ocsigen/js_of_ocaml/blob/1c43da9a925a9df247548158879439ef4039eb38/runtime/graphics.js#L442
        self.jsoo_runtime.caml_gr_draw_image = (im, x, y) => {
            const s = self.jsoo_runtime.caml_gr_state_get();
            s.context.putImageData(im, x, s.height - im.height - y);
            return 0;
        };
        // execute magic init code
        this.__kernel__?.exec(this._initInnerCode);
    }
    async _eval(data, code) {
        if (this.__kernel__ == null)
            return;
        this.__eval_data__ = data;
        this.__kernel__.io.stdout = (...args) => {
            this.sendStdoutStream(data, args.join(" "));
        };
        this.__kernel__.io.stderr = (...args) => {
            this.sendStderrStream(data, args.join(" "));
        };
        const result = this.__kernel__?.exec(code);
        if (typeof result === "string" && result.length > 0)
            return { "text/plain": result.replace(/\n$/, "") };
        return undefined;
    }
    /**
     * Is the source ready to be evaluated or want we more?
     * Usefull to set ps1/ps2 in teminal prompt.
     */
    async more(code) {
        return false;
    }
    /**
     * Put a file on the local (emulated) filesystem.
     */
    putFile(filename, content) {
        if (this.__kernel__ == null)
            return;
        this.__kernel__.createfile(filename, content);
    }
    /**
     * Put an importable module on the local (emulated) filesystem
     * and load dependencies.
     */
    putModule(filename, content) {
        this.putFile(filename, content);
        /* why is this needed?
         * even if path is already added using the #directory directive,
         * one should recall the directive each time the folder is modified...
         */
        this.__kernel__?.loadmodule(filename);
    }
    /**
     * OCaml wrapper arround Kernel.download (to be called by __kernel__.ml).
     */
    ocamlDownload(content, filename) {
        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);
        this.download(array, filename);
    }
    /**
     * Send eval.display event with the given canvas
     * and ocaml-canvas as display_type.
     */
    displayCanvas(canvas) {
        this.display(canvas);
    }
    /**
     * Save a canvas to a file on the local FS.
     */
    async saveCanvas(canvas, path) {
        if (this.__kernel__ == null)
            return;
        const ext = path.split(".").pop()?.toLowerCase();
        let mime = "image/png";
        if (ext === "jpg" || ext === "jpeg")
            mime = "image/jpeg";
        const blob = await canvas.convertToBlob({ type: mime });
        const content = await blob.arrayBuffer();
        this.__kernel__.createfile(path, content);
    }
    /**
     * Download a canvas as an image file (png or jpg).
     */
    downloadCanvas(canvas, format) {
        if (format == null)
            format = "png";
        //@ts-ignore
        format = format.toString().toLowerCase();
        const types = { jpg: "image/jpeg", jpeg: "images/jpeg", png: "image/png" };
        if (!(format in types))
            format = "png";
        const mime = types[format];
        (async () => {
            const blob = await canvas.convertToBlob({ type: mime });
            let image = await this.blobToDataURL(blob);
            // image = image.replace(mime, "image/octet-stream");
            this.download(image, `canvas.${format}`);
        })();
    }
    /**
     * Display a PNG image.
     */
    displayImage(content) {
        const data = this.clone(this.__eval_data__);
        const array = self.jsoo_runtime.caml_convert_bytes_to_array(content);
        const blob = new Blob([array], { type: "image/png" });
        this.displayBlob(blob, data);
    }
}


/***/ }),

/***/ "./node_modules/promise-delegate/dist/es/PromiseDelegate.js":
/*!******************************************************************!*\
  !*** ./node_modules/promise-delegate/dist/es/PromiseDelegate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PromiseDelegate: () => (/* binding */ PromiseDelegate)
/* harmony export */ });
var PromiseDelegate = (function () {
    function PromiseDelegate(ignoreMultipleSettles) {
        var _this = this;
        if (ignoreMultipleSettles === void 0) { ignoreMultipleSettles = false; }
        this.ignoreMultipleSettles = ignoreMultipleSettles;
        this.isSettled = false;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolveCallback = resolve;
            _this.rejectCallback = reject;
        });
    }
    PromiseDelegate.prototype.markAsSettled = function () {
        var wasSettled = this.isSettled;
        if (wasSettled && !this.ignoreMultipleSettles) {
            throw new Error("PromiseDelegate is already settled!");
        }
        this.isSettled = true;
        return !wasSettled;
    };
    Object.defineProperty(PromiseDelegate.prototype, "settled", {
        get: function () {
            return this.isSettled;
        },
        enumerable: false,
        configurable: true
    });
    PromiseDelegate.prototype.resolve = function (value) {
        if (this.markAsSettled()) {
            this.resolveCallback(value);
        }
    };
    PromiseDelegate.prototype.reject = function (reason) {
        if (this.markAsSettled()) {
            this.rejectCallback(reason);
        }
    };
    return PromiseDelegate;
}());

//# sourceMappingURL=PromiseDelegate.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_basthon_kernel-base_lib_kernel_js","vendors-node_modules_comlink_dist_esm_comlink_mjs","vendors-node_modules_basthon_kernel-base_lib_worker_index_js"], () => (__webpack_require__("./node_modules/@basthon/kernel-ocaml/lib/comlink-worker.js")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".bundle.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = self.location + "";
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"node_modules_basthon_kernel-ocaml_lib_comlink-worker_js-node_modules_promise-delegate_dist_es-e9af62": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk_mixly_python_pyodide"] = self["webpackChunk_mixly_python_pyodide"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return Promise.all(["vendors-node_modules_basthon_kernel-base_lib_kernel_js","vendors-node_modules_comlink_dist_esm_comlink_mjs","vendors-node_modules_basthon_kernel-base_lib_worker_index_js"].map(__webpack_require__.e, __webpack_require__)).then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;
//# sourceMappingURL=node_modules_basthon_kernel-ocaml_lib_comlink-worker_js-node_modules_promise-delegate_dist_es-e9af62.bundle.js.map