"use strict";
(self["webpackChunk_mixly_python_pyodide"] = self["webpackChunk_mixly_python_pyodide"] || []).push([["node_modules_basthon_kernel-python3-old_lib_index_js"],{

/***/ "./node_modules/@basthon/kernel-base/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@basthon/kernel-base/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KernelBase: () => (/* reexport safe */ _kernel__WEBPACK_IMPORTED_MODULE_0__.KernelBase),
/* harmony export */   VERSION: () => (/* reexport safe */ _kernel__WEBPACK_IMPORTED_MODULE_0__.VERSION)
/* harmony export */ });
/* harmony import */ var _kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kernel */ "./node_modules/@basthon/kernel-base/lib/kernel.js");



/***/ }),

/***/ "./node_modules/@basthon/kernel-python3-old/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@basthon/kernel-python3-old/lib/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Python3OldKernel: () => (/* reexport safe */ _kernel__WEBPACK_IMPORTED_MODULE_0__.Python3OldKernel)
/* harmony export */ });
/* harmony import */ var _kernel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./kernel */ "./node_modules/@basthon/kernel-python3-old/lib/kernel.js");



/***/ }),

/***/ "./node_modules/@basthon/kernel-python3-old/lib/kernel.js":
/*!****************************************************************!*\
  !*** ./node_modules/@basthon/kernel-python3-old/lib/kernel.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Python3OldKernel: () => (/* binding */ Python3OldKernel)
/* harmony export */ });
/* harmony import */ var _basthon_kernel_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @basthon/kernel-base */ "./node_modules/@basthon/kernel-base/lib/index.js");

const PYODIDE_VERSION = "0.16.1";
/**
 * A Python kernel that satisfies Basthon's API.
 */
class Python3OldKernel extends _basthon_kernel_base__WEBPACK_IMPORTED_MODULE_0__.KernelBase {
    constructor(options) {
        super(options);
        /**
         * Where to find pyodide.js (private).
         */
        this._pyodideURLs = [
            `https://cdn.jsdelivr.net/pyodide/v{PYODIDE_VERSION}/full/pyodide.js`,
        ];
        this.__kernel__ = null;
        this.pythonVersion = "";
        // for locally installed Pyodide
        this._pyodideURLs.unshift(`${this.basthonRoot()}/pyodide/pyodide.js`);
        this._pyodideURLs = options?.pyodideURLs ?? this._pyodideURLs;
    }
    /**
     * Get the URL of Basthon modules dir.
     */
    basthonModulesRoot(absolute = false) {
        return this.basthonRoot(absolute) + "/modules";
    }
    language() {
        return "python3-old";
    }
    languageName() {
        return "Python 3 Old";
    }
    moduleExts() {
        return ["py"];
    }
    /**
     * What to do when loaded (private).
     */
    async _onload() {
        const pyodide = window.pyodide;
        // get the version of Python from Python
        this.pythonVersion = pyodide.runPython("import platform ; platform.python_version()");
        // this is for avoiding "Unknown package 'basthon'" error
        // but can be removed  with 0.17.0 since it is fixed upstream
        const consoleErrorBck = console.error;
        console.error = () => { };
        await pyodide.loadPackage(this.basthonRoot(true) + "/basthon.js");
        console.error = consoleErrorBck;
        // importing basthon to get it's kernel
        await pyodide.runPythonAsync("import basthon as __basthon__");
        // kernel lookup
        this.__kernel__ = pyodide.globals.__basthon__.__kernel__;
        // removing basthon from global namespace
        await pyodide.runPythonAsync("del __basthon__");
    }
    /**
     * Start the Basthon kernel asynchronously.
     */
    async _init() {
        await super._init();
        let pyodideURL = this._pyodideURLs[0];
        for (let url of this._pyodideURLs) {
            url = url.replace("{PYODIDE_VERSION}", PYODIDE_VERSION);
            try {
                const response = await fetch(url, { method: "HEAD" });
                if (response.ok) {
                    pyodideURL = url;
                    break;
                }
            }
            catch (e) { }
        }
        // forcing Pyodide to look at the right location for other files
        window.languagePluginUrl =
            pyodideURL.substr(0, pyodideURL.lastIndexOf("/")) + "/";
        try {
            await Python3OldKernel.loadScript(pyodideURL);
        }
        catch (error) {
            console.log(error);
            console.error("Can't load pyodide.js");
            throw error;
        }
        if (window.languagePluginLoader == null) {
            throw new Error("Can't load pyodide.js");
        }
        await window.languagePluginLoader;
        await this._onload();
    }
    /**
     * Execution count getter overload.
     */
    get execution_count() {
        return this.__kernel__.execution_count();
    }
    /**
     * Basthon async code evaluation function.
     */
    async evalAsync(code, outCallback, errCallback, data = null) {
        if (typeof outCallback === "undefined") {
            outCallback = function (text) {
                console.log(text);
            };
        }
        if (typeof errCallback === "undefined") {
            errCallback = function (text) {
                console.error(text);
            };
        }
        // loading dependencies are loaded by eval
        return await this.__kernel__.eval(code, outCallback, errCallback, data);
    }
    /**
     * Start the kernel.
     */
    async _start() {
        await super._start();
        return this.__kernel__.start();
    }
    /**
     * Stop the kernel.
     */
    async _stop() {
        this.__kernel__.stop();
        await super._stop();
    }
    /**
     * Put a file on the local (emulated) filesystem.
     */
    async putFile(filename, content) {
        this.__kernel__.put_file(filename, content);
    }
    /**
     * Put an importable module on the local (emulated) filesystem
     * and load dependencies.
     */
    async putModule(filename, content) {
        return this.__kernel__.put_module(filename, content);
    }
    /**
     * List modules launched via putModule.
     */
    userModules() {
        return this.__kernel__.user_modules();
    }
    /**
     * Get a file content from the VFS.
     */
    getFile(path) {
        return this.__kernel__.get_file(path);
    }
    /**
     * Get a user module file content.
     */
    getUserModuleFile(filename) {
        return this.__kernel__.get_user_module_file(filename);
    }
    /**
     * Is the source ready to be evaluated or want we more?
     * Usefull to set ps1/ps2 for teminal prompt.
     */
    async more(source) {
        return this.__kernel__.more(source);
    }
    /**
     * Mimic the CPython's REPL banner.
     */
    banner() {
        /* We don't return this.__kernel__.banner();
         * since the banner should be available ASAP.
         * In tests, we check this.banner() ===  this.__kernel__.banner().
         */
        return `Python 3.8.2 (default, Dec 25 2020 21:20:57) on WebAssembly VM\nType "help", "copyright", "credits" or "license" for more information.`;
    }
    /**
     * Complete a code at the end (usefull for tab completion).
     *
     * Returns an array of two elements: the list of completions
     * and the start index.
     */
    async complete(code) {
        return this.__kernel__.complete(code);
    }
    /**
     * Change current directory (Python's virtual FS).
     */
    chdir(path) {
        window.pyodide._module.FS.chdir(path);
    }
    /**
     * Create directory (Python's virtual FS).
     */
    mkdir(path) {
        window.pyodide._module.FS.mkdir(path);
    }
}


/***/ })

}]);
//# sourceMappingURL=node_modules_basthon_kernel-python3-old_lib_index_js.bundle.js.map